sudo: required

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - K8S_VERSION="v1.10.0"
    - MINIKUBE_VERSION="v0.28.2"

before_script:
  - sudo apt -y update
  - sudo apt -y install linux-image-extra-$(uname -r)
  - sudo mount --make-rshared /sys
  - docker run --name enable_lio --privileged --rm --cap-add=SYS_ADMIN -v /lib/modules:/lib/modules -v /sys:/sys:rshared storageos/init:0.1
  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  # TODO: remove the --bootstrapper flag once this issue is solved: https://github.com/kubernetes/minikube/issues/2704
  - sudo minikube config set WantReportErrorPrompt false
  - sudo -E minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC
  # Fix the kubectl context, as it's often stale.
  # - minikube update-context
  # Wait for Kubernetes to be up and ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done

script:
  # Create example Redis deployment on Kubernetes.
  - kubectl cluster-info
  - kubectl run travis-example --image=redis
  - kubectl get deployment
